let mainloop;

const gi = imports.gi;
const GLib = gi.GLib;
const GFile = gi.Gio.File;
const System = imports.system;

const BEGINNING = Date.now();
const CURRENT_DIR = GLib.get_current_dir();
const DIR_SEPARATOR = /\//.test(CURRENT_DIR) ? '/' : '\\';

const EventEmitter = ARGV.core.get('events').EventEmitter;

const process = Object.assign(
  new EventEmitter(), {
    argv: (() => {
      for (var
          evalArg = /^-e|--eval$/,
          argv = [GFile.new_for_path(System.programInvocationName).get_path()],
          i = 0; i < ARGV.length; i++) {
        if (ARGV[i][0] !== '-') {
          if (!evalArg.test(ARGV[i - 1] ? ARGV[i - 1] : undefined)) {
            argv = argv.concat(
              GFile.new_for_path(
                GLib.path_is_absolute(ARGV[i]) ?
                ARGV[i] : ('.' + DIR_SEPARATOR + ARGV[i])
              ).get_path(),
              ARGV.slice(i + 1)
            );
          }
          break;
        }
      }
      return argv;
    })(),
    binding: (which) => imports.cinnode[which],
    cwd: () => CURRENT_DIR,
    env: ((arr) => {
      const env = {};
      for (let i = 0, p, info; i < arr.length; i++) {
        info = arr[i];
        p = info.indexOf('=');
        env[info.slice(0, p)] = info.slice(p + 1);
      }
      return env;
    })(GLib.get_environ()),
    abort: status => {
      process.emit('abort');
      System.exit(1);
    },
    exit: status => {
      process.emit('exit', status);
      System.exit(status || 0);
    },
    platform: ((platform) => {
      switch (true) {
        // TODO /Win|Mingw|WOW/i ???
      case /\b(?:Win|WOW)\b/i.test(platform):
        return 'win32';
      default:
        return platform.toLowerCase();
      }
    })(''.trim.call(GLib.spawn_command_line_sync('uname')[1])),
    uptime: () => (Date.now() - BEGINNING) / 1000,
    nextTick: function nextTick() {
      (mainloop || (
        mainloop = process.binding('mainloop')
      )).idle.apply(mainloop, arguments);
    }
  }
);

Object.defineProperties(
  process, {
    arch: {
      enumerable: true,
      get: () => require('os').arch()
    }
  }
);

Object.defineProperty(
  global,
  'process', {
    enumerable: true,
    value: process
  }
);

module.exports = process;